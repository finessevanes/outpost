Quickstart - Verifying Credentials
Import the SDK package and the necessary react components
import { useState, useEffect, useRef } from "react";
import { AirCredentialWidget, type QueryRequest, type VerificationResults } from "@mocanetwork/air-credential-sdk";
import "@mocanetwork/air-credential-sdk/dist/style.css";

â€‹
State Management
State
Purpose
isLoading
Tracks whether the widget is loading
verificationResult
Holds results from the verification flow
error
Stores any errors encountered during widget launch
widgetRef
Ref to the active instance of AirCredentialWidget
config
Contains dynamic widget configuration settings
Configuration Fields
These control the behavior and branding of the verification widget.
Field
Description
verifierAuth
Auth token to verify credentials
programId
Identifier for the program
partnerId
AirKit partner id for the verifier
redirectUrlForIssuer
URL to direct users for new credential issuing
Retrieve Credential Auth Token from API Key  
const getVerifierAuthToken = async (verifierDid: string, apiKey: string, apiUrl: string): Promise<string | null> => {
  try {
    const response = await fetch(`${apiUrl}/verifier/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        accept: "*/*",
        "X-Test": "true",
      },
      body: JSON.stringify({
        verifierDid: verifierDid,
        authToken: apiKey,
      }),
    });

    if (!response.ok) {
      throw new Error(`API call failed with status: ${response.status}`);
    }

    const data = await response.json();

    if (data.code === 80000000 && data.data && data.data.token) {
      return data.data.token;
    } else {
      console.error("Failed to get verifier auth token from API:", data.msg || "Unknown error");
      return null;
    }
  } catch (error) {
    console.error("Error fetching verifier auth token:", error);
    return null;
  }
};
â€‹
Retrieve Cross Partner Token

      const rp = await airService?.goToPartner(environmentConfig.widgetUrl).catch((err) => {
        console.error("Error getting URL with token:", err);
      });
â€‹
Init SDK with Verify request  
 handleVerifyCredential
Initializes and launches the widget with the config and handles events.
Creates a QueryRequest
Launches the widget
Listens for verifyCompleted and close events
Updates result state and logs events
const handleVerifyCredential = () => {
    setIsLoading(true);
    setError(null);
    setVerificationResult(null);
		const fetchedVerifierAuthToken = await getVerifierAuthToken(config.verifierDid, config.apiKey, environmentConfig.apiUrl);

    try {
      // Create the query request
      const queryRequest: QueryRequest = {
        process: "Verify",
        verifierAuth: fetchedVerifierAuthToken,
        programId: config.programId,
      };

     // Create and configure the widget with proper options
      widgetRef.current = new AirCredentialWidget(queryRequest, partnerId, {
        endpoint: rp?.urlWithToken,
        airKitBuildEnv: airKitBuildEnv || BUILD_ENV.SANDBOX,
        theme: "light", // currently only have light theme
        locale: LOCALE as Language,
        redirectUrlForIssuer: config.redirectUrlForIssuer || undefined,
      });

      // Set up event listeners
      widgetRef.current.on("verifyCompleted", (results: VerificationResults) => {
        setVerificationResult(results);
        setIsLoading(false);
        console.log("Verification completed:", results);
      });

      widgetRef.current.on("close", () => {
        setIsLoading(false);
        console.log("Widget closed");
      });

      // Start the widget
      widgetRef.current.launch();
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
      setIsLoading(false);
    }
  };
â€‹
handleReset
Resets the result/error state
Destroys the widget if it exists
const handleReset = () => {
    setVerificationResult(null);
    setError(null);
    if (widgetRef.current) {
      widgetRef.current.destroy();
      widgetRef.current = null;
    }
  };
â€‹
Status Helper Functions
These utilities provide the correct icon, color, and description based on credential status.
Function
Description
getStatusColor
Returns CSS class string for status
getStatusIcon
Returns an emoji icon for status
getStatusDescription
Returns a human-readable description
 useEffect Cleanup
Ensures the widget is destroyed when the component unmounts.
useEffect(() => {
  return () => {
    if (widgetRef.current) {
      widgetRef.current.destroy();
    }
  };
}, []);

â€‹
Parameters to configure:
Auth token (available on Dashboard - > Verifier - > API Key of the API Key page â†’ Request Login API )
Program ID
Parter NID
Issuer redirect URL (for cases when the credential doesnt exist for the user)
Testing Tips
Use different programId values to simulate results.
Change redirectUrlForIssuer to point to real or test issuance flows.
ðŸ›  Customization
To customize the widget flow or theme:
widgetRef.current = new AirCredentialWidget(queryRequest, config.projectName, config.projectLogo, {
  theme: "light", // or "dark", "auto"
  locale: "en",
  redirectUrlForIssuer: config.redirectUrlForIssuer,
});
